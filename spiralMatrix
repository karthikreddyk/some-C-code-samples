/*
Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.

Example 1:

Input:
[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
Output: [1,2,3,6,9,8,7,4,5]

Example 2:

Input:
[
  [1, 2, 3, 4],
  [5, 6, 7, 8],
  [9,10,11,12]
]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]

*/




class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        vector<int> result;       
        int n = matrix.size();
        if (n == 0){
            return vector<int>{};
        }
        
        
        int m = matrix[0].size();    
        int count = 0;
        int upper_boundary_row = count;
        int right_boundary_column = m - 1 - count;
        int lower_boundary_row = n-1 - count;
        int left_boundary_column = count;              

        int totalSize = n*m;       
        while(true)    {           
            if (left_boundary_column == right_boundary_column){
                for (int i = upper_boundary_row; i <=lower_boundary_row; i++  ){
                    result.push_back(matrix[i][right_boundary_column]);
                    totalSize--;
                    if (!totalSize){break;}
                }
                if (!totalSize){break;}                
            }
            if (upper_boundary_row == lower_boundary_row){
                for (int i = left_boundary_column; i <=right_boundary_column; i++  ){
                    result.push_back(matrix[upper_boundary_row][i]);
                    totalSize--;
                    if (!totalSize){break;}
                }
                if (!totalSize){break;}                
            }                   
            for(int i = left_boundary_column; i < right_boundary_column; i++ ){
                result.push_back(matrix[upper_boundary_row][i]);
                totalSize--;
                if (!totalSize){break;}
            }
            for(int i = upper_boundary_row; i < lower_boundary_row; i++ ){
                result.push_back(matrix[i][right_boundary_column]);
                totalSize--;
                if (!totalSize){break;}                
            }

            for(int i = right_boundary_column; i > left_boundary_column; i-- ){
                result.push_back(matrix[lower_boundary_row][i]);
                totalSize--;
                if (!totalSize){break;}                
            }        

            for(int i = lower_boundary_row; i > upper_boundary_row; i-- ){
                result.push_back(matrix[i][left_boundary_column]);
                totalSize--;
                if (!totalSize){break;}                
            }

            count++;

            upper_boundary_row = count;
            right_boundary_column = m - 1 - count;
            lower_boundary_row = n-1 - count;
            left_boundary_column = count;           

            if (!totalSize){break;}            
            
            if ((count  > m) && (count  > n)){
                break;
            }
            

        }
        
        return result;
        

    }
};
